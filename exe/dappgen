#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optimist'
require 'erubis'
require 'fileutils'

class DapperConfig
  def self.execute(filename)
    DapperConfig.new(File.read(filename), filename)
  end

  attr_reader :arguments, :script

  def initialize(script, filename)
    @arguments = {}
    @script = []
    instance_eval script, filename
  end

  def requires(argument_name)
    @arguments[argument_name] = {
      required: true,
      multiple: false
    }
  end

  def remove(name)
    @script << { remove: name }
  end

  def generate(name, with:)
    @script << { generate: name, with: with }
  end

  def in_directory(name)
    @script << { setdir: name }
  end

  def copy_base!
    @script << { copy_base: true }
  end
end

class Script
  attr_reader :opts

  def initialize(dapper_config, opts)
    @dapper_config = dapper_config
    @opts = opts
  end

  def built_script
    result = []

    @dapper_config.script.each do |statements|
      result_statement = {}
      statements.each do |key, value|
        if value.is_a? String
          value = value.gsub(/<([^>]+)>/) do |match|
            opts[match[1..-2].to_sym]
          end
        end

        result_statement[key] = value
      end
      result << result_statement
    end

    result
  end
end

class DebugMachine
  def setdir(arg)
    p "setdir", arg
  end

  def copy_base(arg)
    p "copy_base", arg
  end

  def remove(arg)
    p "remove", arg
  end

  def generate(arg, opts)
    p "generate", arg, opts
  end
end

class Interpreter
  def initialize(script, machine)
    @script = script
    @machine = machine
  end

  def built_script
    @built_script ||= @script.built_script
  end

  def run!
    built_script.each do |statement|
      args = [
        statement.first.first,
        statement.first[1]
      ]

      options = statement.to_a[1..-1].to_h

      args << options unless options.empty?
      @machine.public_send *args
    end
  end
end

local_data_dir = File.join(Gem.loaded_specs['dappgen'].full_gem_path, 'data', 'dappgen', 'generators')
local_generators = Dir["#{local_data_dir}/*"]

local_generator_names = local_generators.map { |x| x.sub(%r{^#{local_data_dir}/}, '') }

thing = ARGV[0]

unless local_generator_names.include? thing
  puts "Unknown generator '#{thing}'"
  puts "Valid generators are: #{local_generator_names.map{|x| "'#{x}'"}.join(',')}"
  exit(1)
end

selected_generator = "#{local_data_dir}/#{thing}"

cfg = DapperConfig.execute("#{selected_generator}/DapperConfig")

opts = Optimist::options do
  vstring = "Dappgen #{Dappgen::VERSION}"
  version vstring
  banner <<~EOS
    #{vstring}

    Usage:
          dappgen #{thing} [options]
    where [options] are:
  EOS

  cfg.arguments.each do |arg_name, info|
    opt arg_name.to_sym, "arg named #{arg_name}", type: :string, required: info[:required]
  end
end

puts "Generating a #{thing}"

s = Script.new(cfg, opts)

m = DebugMachine.new
int = Interpreter.new(s, m)

int.run!
